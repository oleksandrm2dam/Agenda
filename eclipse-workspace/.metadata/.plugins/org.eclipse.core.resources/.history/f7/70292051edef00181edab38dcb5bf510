package entities;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;

public class Phonebook implements Serializable {
	
	private static final long serialVersionUID = -8424820299914478473L;
	private ArrayList<Contact> contacts;
	private static String executionPath = System.getProperty("user.dir").replace("\\", "/");
	private static File phonebookDir = new File(executionPath + "/files");

	// START Constructors
	public Phonebook() {
		contacts = new ArrayList<Contact>();
	}
	
	public Phonebook(ArrayList<Contact> contacts) {
		this.contacts = contacts;
	}
	// END Constructors
	
	// START Getters and Setters
	public ArrayList<Contact> getContacts() {
		return contacts;
	}

	public void setContacts(ArrayList<Contact> contacts) {
		this.contacts = contacts;
	}
	// END Getters and Setters
	
	@Override
	public String toString() {
		return "Phonebook [contacts=" + contacts + "]";
	}
	
	// START Search methods
	public ArrayList<Contact> searchByName(String wantedName) {
		ArrayList<Contact> foundContacts = new ArrayList<Contact>();
		wantedName = wantedName.toLowerCase();
		
		for(Contact currentContact : contacts) {
			if(currentContact.getName().toLowerCase().equals(wantedName)) {
				foundContacts.add(currentContact);
			}
		}
		
		return foundContacts;
	}
	
	public ArrayList<Contact> searchByLastName(String wantedLastName) {
		ArrayList<Contact> foundContacts = new ArrayList<Contact>();
		wantedLastName = wantedLastName.toLowerCase();
		
		for(Contact currentContact : contacts) {
			if(currentContact.getLastName().toLowerCase().equals(wantedLastName)) {
				foundContacts.add(currentContact);
			}
		}
		
		return foundContacts;
	}
	
	public ArrayList<Contact> searchByAlias(String wantedAlias) {
		ArrayList<Contact> foundContacts = new ArrayList<Contact>();
		wantedAlias = wantedAlias.toLowerCase();
		
		for(Contact currentContact : contacts) {
			if(currentContact.getAlias().toLowerCase().equals(wantedAlias)) {
				foundContacts.add(currentContact);
			}
		}
		
		return foundContacts;
	}
	// END Search methods
	
	public void readPhonebook() {
		File file;
		FileInputStream fis;
		ObjectInputStream ois = null;
		try {
			file = new File(phonebookDir, "phonebook.pb");
			if(file.exists()) {
				fis = new FileInputStream(file);
				ois = new ObjectInputStream(fis);
				return (Phonebook) ois.readObject();
			}
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
		} finally {
			try {
				if(ois != null) {
					ois.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return new Phonebook();
	}
	
	public void writePhonebook() {
		File file;
		FileOutputStream fos;
		ObjectOutputStream oos = null;
		try {
			if(!phonebookDir.exists()) {
				phonebookDir.mkdirs();
			}
			file = new File(phonebookDir, "phonebook.pb");
			fos = new FileOutputStream(file);
			oos = new ObjectOutputStream(fos);
			oos.writeObject(phonebook);
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if(oos != null) {
					oos.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}