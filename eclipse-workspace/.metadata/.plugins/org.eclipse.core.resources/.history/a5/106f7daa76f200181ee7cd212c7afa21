package entities;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLReaderFactory;

import com.thoughtworks.xstream.XStream;

import util.SAXHandler;

public class Phonebook implements Serializable {
	
	private static final long serialVersionUID = -8424820299914478473L;
	private ArrayList<Contact> contacts;
	private static String lb = "\n"; // LineBreak for text files

	// START Constructors
	public Phonebook() {
		contacts = new ArrayList<Contact>();
	}
	
	public Phonebook(ArrayList<Contact> contacts) {
		this.contacts = contacts;
	}
	// END Constructors
	
	// START Getters and Setters
	public ArrayList<Contact> getContacts() {
		return contacts;
	}

	public void setContacts(ArrayList<Contact> contacts) {
		this.contacts = contacts;
	}
	// END Getters and Setters
	
	@Override
	public String toString() {
		return "Phonebook [contacts=" + contacts + "]";
	}
	
	// START Search methods
	public ArrayList<Contact> searchByName(String wantedName) {
		ArrayList<Contact> foundContacts = new ArrayList<Contact>();
		wantedName = wantedName.toLowerCase();
		
		for(Contact currentContact : contacts) {
			if(currentContact.getName().toLowerCase().equals(wantedName)) {
				foundContacts.add(currentContact);
			}
		}
		
		return foundContacts;
	}
	
	public ArrayList<Contact> searchByLastName(String wantedLastName) {
		ArrayList<Contact> foundContacts = new ArrayList<Contact>();
		wantedLastName = wantedLastName.toLowerCase();
		
		for(Contact currentContact : contacts) {
			if(currentContact.getLastName().toLowerCase().equals(wantedLastName)) {
				foundContacts.add(currentContact);
			}
		}
		
		return foundContacts;
	}
	
	public ArrayList<Contact> searchByAlias(String wantedAlias) {
		ArrayList<Contact> foundContacts = new ArrayList<Contact>();
		wantedAlias = wantedAlias.toLowerCase();
		
		for(Contact currentContact : contacts) {
			if(currentContact.getAlias() != null) {
				if(currentContact.getAlias().toLowerCase().equals(wantedAlias)) {
					foundContacts.add(currentContact);
				}
			}
		}
		
		return foundContacts;
	}
	// END Search methods
	
	// START Text Export/Import
	public void exportToTxt(File phonebookFile) {
		FileWriter fw = null;
		
		try {
			fw = new FileWriter(phonebookFile);
			
			// Write number of contacts
			fw.write(getContacts().size() + lb);
			for(Contact currentContact : getContacts()) {
				// Write name and last name
				fw.write(currentContact.getName() + lb);
				fw.write(currentContact.getLastName() + lb);
				
				// Write alias
				if(currentContact.getAlias() == null) {
					fw.write("0" + lb);
				} else {
					fw.write("1" + lb);
					fw.write(currentContact.getAlias() + lb);
				}
				
				// Write emails
				if(currentContact.getEmail() == null || currentContact.getEmail().size() == 0) {
					fw.write("0" + lb);
				} else {
					fw.write(currentContact.getEmail().size() + lb);
					for(String currentEmail : currentContact.getEmail()) {
						fw.write(currentEmail + lb);
					}	
				}
				
				// Write address
				if(currentContact.getAddress() == null) {
					fw.write("0" + lb);
				} else {
					fw.write("1" + lb);
					fw.write(currentContact.getAddress() + lb);
				}
				
				// Write landline phone number
				if(currentContact.getLandlinePhoneNumber() == null) {
					fw.write("0" + lb);
				} else {
					fw.write("1" + lb);
					fw.write(currentContact.getLandlinePhoneNumber() + lb);
				}
				
				// Write mobile phone numbers
				if(currentContact.getPhoneNumber() == null || currentContact.getPhoneNumber().size() == 0) {
					fw.write("0" + lb);
				} else {
					fw.write(currentContact.getPhoneNumber().size() + lb);
					for(String currentPhoneNumber : currentContact.getPhoneNumber()) {
						fw.write(currentPhoneNumber + lb);
					}
				}
				
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if(fw != null) {
					fw.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	public void importFromTxt(File phonebookFile) {
		FileReader fr = null;
		
		try {
			fr = new FileReader(phonebookFile);
			Phonebook phonebook = new Phonebook();
			int i;
			String fileValue = "";
			
			while((i = fr.read()) != -1) {
				fileValue += (char) i;
			}
			String[] values = fileValue.split(lb); // Contains all the values of the file
			
			String name;
			String lastName;
			String alias;
			ArrayList<String> email;
			String address;
			String landlinePhoneNumber;
			ArrayList<String> phoneNumber;
			
			int cIndex = 0; // Used to keep track of which value from values[] is currently selected
			int numContacts = Integer.parseInt(values[cIndex]);
			++cIndex;
			
			for(int n = 0; n < numContacts; ++n) {
				// Read name
				name = values[cIndex];
				++cIndex;
				
				// Read last name
				lastName = values[cIndex];
				++cIndex;
				
				// Read alias
				if(values[cIndex].equals("0")) {
					alias = null;
				} else {
					++cIndex;
					alias = values[cIndex];
				}
				++cIndex;
				
				// Read emails
				int numEmails = Integer.parseInt(values[cIndex]);
				++cIndex;
				
				if(numEmails == 0) {
					email = new ArrayList<String>();
				} else {
					email = new ArrayList<String>();
					for(int j = 0; j < numEmails; ++j) {
						email.add(values[cIndex]);
						++cIndex;
					}
				}
				
				// Read address
				if(values[cIndex].equals("0")) {
					address = null;
				} else {
					++cIndex;
					address = values[cIndex];
				}
				++cIndex;
				
				// Read landline phone number
				if(values[cIndex].equals("0")) {
					landlinePhoneNumber = null;
				} else {
					++cIndex;
					landlinePhoneNumber = values[cIndex];
				}
				++cIndex;
				
				// Read mobile phone numbers
				int numPhones = Integer.parseInt(values[cIndex]);
				++cIndex;
				
				if(numPhones == 0) {
					phoneNumber = new ArrayList<String>();
				} else {
					phoneNumber = new ArrayList<String>();
					for(int j = 0; j < numPhones; ++j) {
						phoneNumber.add(values[cIndex]);
						++cIndex;
					}
				}
				
				// New contact with current attributes
				Contact newContact = new Contact(
						name,
						lastName,
						alias,
						email,
						address,
						landlinePhoneNumber,
						phoneNumber
						);
				// Add new contact to the phonebook
				phonebook.getContacts().add(newContact);
			}
			// Set the imported contacts to this phonebook
			this.setContacts(phonebook.getContacts());
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if(fr != null) {
					fr.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	// END Text Export/Import
	
	// START Binary Export/Import
	public void exportToBin(File phonebookFile) {
		/**
		 *	0 = Field is null
		 *	Any other number = The number of elements in the ArrayList
		 */
		FileOutputStream fos;
		DataOutputStream dos = null;
		
		try {
			fos = new FileOutputStream(phonebookFile);
			dos = new DataOutputStream(fos);
			
			// Number of contacts to be written
			dos.writeInt(getContacts().size());
			
			for(Contact currentContact : getContacts()) {
				// Write name and last name
				dos.writeUTF(currentContact.getName());
				dos.writeUTF(currentContact.getLastName());
				
				// Write alias
				if(currentContact.getAlias() == null) {
					dos.writeInt(0);
				} else {
					dos.writeInt(1);
					dos.writeUTF(currentContact.getAlias());
				}
				
				// Write emails
				if(currentContact.getEmail() == null || currentContact.getEmail().size() == 0) {
					dos.writeInt(0);
				} else {
					dos.writeInt(currentContact.getEmail().size());
					for(String currentEmail : currentContact.getEmail()) {
						dos.writeUTF(currentEmail);
					}
				}
				
				// Write address
				if(currentContact.getAddress() == null) {
					dos.writeInt(0);
				} else {
					dos.writeInt(1);
					dos.writeUTF(currentContact.getAddress());
				}
				
				// Write landline phone number
				if(currentContact.getLandlinePhoneNumber() == null) {
					dos.writeInt(0);
				} else {
					dos.writeInt(1);
					dos.writeUTF(currentContact.getLandlinePhoneNumber() );
				}
				
				// Write mobile phone numbers
				if(currentContact.getPhoneNumber() == null || currentContact.getPhoneNumber().size() == 0) {
					dos.writeInt(0);
				} else {
					dos.writeInt(currentContact.getPhoneNumber().size());
					for(String currentPhoneNumber : currentContact.getPhoneNumber()) {
						dos.writeUTF(currentPhoneNumber);
					}
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if(dos != null) {
					dos.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	public void importFromBin(File phonebookFile) {
		FileInputStream fis;
		DataInputStream dis = null;
		
		try {
			fis = new FileInputStream(phonebookFile);
			dis = new DataInputStream(fis);
			
			Phonebook phonebook = new Phonebook();
			
			String name;
			String lastName;
			String alias;
			ArrayList<String> email;
			String address;
			String landlinePhoneNumber;
			ArrayList<String> phoneNumber;
			
			int numContacts = dis.readInt();
			for(int i = 0; i < numContacts; ++i) {
				// Read name and last name
				name = dis.readUTF();
				lastName = dis.readUTF();
				
				// Read alias
				if(dis.readInt() == 0) {
					alias = null;
				} else {
					alias = dis.readUTF();
				}
				
				// Read emails
				int numEmails = dis.readInt();
				if(numEmails == 0) {
					email = new ArrayList<String>();
				} else {
					email = new ArrayList<String>();
					for(int j = 0; j < numEmails; ++j) {
						email.add(dis.readUTF());
					}
				}
				
				// Read address
				if(dis.readInt() == 0) {
					address = null;
				} else {
					address = dis.readUTF();
				}
				
				// Read landline phone number
				if(dis.readInt() == 0) {
					landlinePhoneNumber = null;
				} else {
					landlinePhoneNumber = dis.readUTF();
				}
				
				// Read mobile phone numbers
				int numPhones = dis.readInt();
				if(numPhones == 0) {
					phoneNumber = new ArrayList<String>();
				} else {
					phoneNumber = new ArrayList<String>();
					for(int j = 0; j < numPhones; ++j) {
						phoneNumber.add(dis.readUTF());
					}
				}
				
				// New contact with current attributes
				Contact newContact = new Contact(
						name,
						lastName,
						alias,
						email,
						address,
						landlinePhoneNumber,
						phoneNumber
						);
				// Add new contact to the phonebook
				phonebook.getContacts().add(newContact);
			}
			this.setContacts(phonebook.getContacts());
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if(dis != null) {
					dis.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	// END Binary Export/Import
	
	// START XML Export/Import
	public void exportToXml(File phonebookFile) {
		try {
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder db = dbf.newDocumentBuilder();
			Document doc = db.newDocument();
			
			Element eRoot = doc.createElement("phonebook"); // Root of the XML file
			doc.appendChild(eRoot);
			
			for(Contact currentContact : getContacts()) {
				Element contact = doc.createElement("contact");
				eRoot.appendChild(contact);
				
				// Write name
				Element name = doc.createElement("name");
				name.appendChild(doc.createTextNode(currentContact.getName()));
				contact.appendChild(name);
				
				// Write last name
				Element lastName = doc.createElement("lastName");
				lastName.appendChild(doc.createTextNode(currentContact.getLastName()));
				contact.appendChild(lastName);
				
				// Write alias
				Element alias = doc.createElement("alias");
				if(currentContact.getAlias() != null) {
					alias.appendChild(doc.createTextNode(currentContact.getAlias()));
				}
				contact.appendChild(alias);
				
				// Write emails
				Element emails = doc.createElement("emails");
				if(currentContact.getEmail() != null && currentContact.getEmail().size() != 0) {
					for(String currentEmail : currentContact.getEmail()) {
						Element email = doc.createElement("email");
						email.appendChild(doc.createTextNode(currentEmail));
						emails.appendChild(email);
					}
				}
				contact.appendChild(emails);
				
				// Write address
				Element address = doc.createElement("address");
				if(currentContact.getAddress() != null) {
					address.appendChild(doc.createTextNode(currentContact.getAddress()));
				}
				contact.appendChild(address);
				
				// Write landline phone number
				Element landlinePhoneNumber = doc.createElement("landlinePhoneNumber");
				if(currentContact.getLandlinePhoneNumber() != null) {
					landlinePhoneNumber.appendChild(doc.createTextNode(currentContact.getLandlinePhoneNumber()));
				}
				contact.appendChild(landlinePhoneNumber);
				
				// Write mobile phone numbers
				Element phoneNumbers = doc.createElement("phoneNumbers");
				if(currentContact.getPhoneNumber() != null) {
					for(String currentPhoneNumber : currentContact.getPhoneNumber()) {
						Element phoneNumber = doc.createElement("phoneNumber");
						phoneNumber.appendChild(doc.createTextNode(currentPhoneNumber));
						phoneNumbers.appendChild(phoneNumber);
					}
				}
				contact.appendChild(phoneNumbers);
			} // END for each loop
			
			TransformerFactory tf = TransformerFactory.newInstance();
			Transformer transformer = tf.newTransformer();
			DOMSource source = new DOMSource(doc);
			StreamResult result = new StreamResult(phonebookFile); // File passed by attribute
			
			transformer.transform(source, result);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void importFromXml(File phonebookFile) {
		Phonebook newPhonebook = new Phonebook();
		
		try {
			XMLReader reader = XMLReaderFactory.createXMLReader();
			reader.setContentHandler(new SAXHandler(newPhonebook));
			reader.parse(new InputSource(new FileInputStream(phonebookFile)));
			
			this.setContacts(newPhonebook.getContacts());
		} catch (IOException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
		}
	}
	// END XML Export/Import
	
	// START XML XStream Export/Import
	public void exportToXmlXstream(File phonebookFile) {
		XStream xstream = new Xstream();
	}
	
	public void importFromXmlXstream(File phonebookFile) {
		
	}
	// END XML XStream Export/Import
}